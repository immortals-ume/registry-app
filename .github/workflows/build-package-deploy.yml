name: CI Pipeline

on:
  push:
    branches: [ master,develop,main,feature.* ]
  pull_request:
    branches: [ master,develop ]

env:
  JAVA_VERSION: '21'
  DOCKER_REGISTRY: ghcr.io

jobs:
  setup:
    name: ☕ Set up Java
    runs-on: ubuntu-latest
    outputs:
      java-version: ${{ env.JAVA_VERSION }}
    steps:
      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

  checkout-and-cache:
    name: Checkout & Cache
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v3
      - name: 💾 Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-
      - name: 📦 Make Gradle wrapper executable
        run: chmod +x ./gradlew

  build:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    needs: checkout-and-cache
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v3
      - name: ✅ Run Tests
        run: ./gradlew test --no-daemon
      - name: 🔧 Build Project
        run: ./gradlew clean build --no-daemon


  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v3

      - name: 📄 Ensure gradle.properties exists
        run: |
          if [ ! -f gradle.properties ]; then
            echo "# temporary gradle.properties" > gradle.properties
          fi

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Build Docker Image
        run: |
          docker build -t local-image:latest .

      - name: 🏷️ Tag Docker Image
        run: |
          docker tag local-image:latest $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:latest

      - name: 📤 Push Docker Image
        run: |
          docker push $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:latest